#!/usr/bin/env python3
"""
üéÆ DEMO COMPLETO - Patr√≥n Facade en Acci√≥n

Este archivo demuestra c√≥mo usar la Fachada para obtener informaci√≥n
completa de ciudades sin conocer los detalles de las APIs individuales.
"""
import sys
import os

# A√±adir el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.facade.informacion_facade import FachadaInformacionCiudad
from colorama import init, Fore, Style

# Inicializar colorama
init()


def demo_basico():
    """Demostraci√≥n b√°sica del patr√≥n Facade"""
    print(f"{Fore.MAGENTA}{'='*80}{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}üéÆ DEMO B√ÅSICO - Patr√≥n Facade{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}{'='*80}{Style.RESET_ALL}")
    
    # Crear la fachada (interfaz unificada)
    facade = FachadaInformacionCiudad()
    
    # UNA SOLA LLAMADA obtiene informaci√≥n de m√∫ltiples APIs
    ciudad = "Madrid"
    informacion = facade.obtener_informacion_completa(ciudad)
    
    # Mostrar resultados de forma bonita
    facade.mostrar_resumen(informacion)


def demo_multiples_ciudades():
    """Demuestra el uso con m√∫ltiples ciudades"""
    print(f"\n{Fore.MAGENTA}{'='*80}{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}üåç DEMO M√öLTIPLES CIUDADES{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}{'='*80}{Style.RESET_ALL}")
    
    facade = FachadaInformacionCiudad()
    
    ciudades = ["Barcelona", "M√©xico", "Buenos Aires"]
    
    for ciudad in ciudades:
        print(f"\n{Fore.CYAN}üèôÔ∏è  Consultando: {ciudad}{Style.RESET_ALL}")
        informacion = facade.obtener_informacion_completa(ciudad)
        
        # Mostrar solo un resumen corto
        print(f"\n{Fore.YELLOW}üìã Resumen de {ciudad}:{Style.RESET_ALL}")
        if informacion.clima:
            print(f"   üå§Ô∏è  {informacion.clima.temperatura}¬∞C - {informacion.clima.descripcion}")
        if informacion.pais:
            print(f"   üåç {informacion.pais.bandera_emoji} {informacion.pais.nombre_comun}")
        if informacion.noticias:
            print(f"   üì∞ {len(informacion.noticias.noticias)} noticias disponibles")
        
        print("-" * 40)


def demo_comparacion_sin_facade():
    """Muestra c√≥mo ser√≠a SIN usar el patr√≥n Facade"""
    print(f"\n{Fore.RED}{'='*80}{Style.RESET_ALL}")
    print(f"{Fore.RED}‚ùå EJEMPLO SIN FACADE (Complejo){Style.RESET_ALL}")
    print(f"{Fore.RED}{'='*80}{Style.RESET_ALL}")
    
    print(f"{Fore.YELLOW}Sin Facade, el desarrollador tendr√≠a que:{Style.RESET_ALL}")
    print("1. üîß Conocer y configurar 3 APIs diferentes")
    print("2. üîë Manejar diferentes sistemas de autenticaci√≥n")
    print("3. üìä Procesar 3 formatos de respuesta diferentes")
    print("4. ‚ö†Ô∏è  Manejar errores de cada API por separado")
    print("5. üîÑ Implementar fallbacks manualmente")
    
    codigo_sin_facade = '''
# Sin Facade - C√≥digo complejo y acoplado
import requests

# API 1: Clima (OpenWeatherMap)
weather_response = requests.get(
    "http://api.openweathermap.org/data/2.5/weather",
    params={"q": "Madrid", "appid": "tu_api_key", "units": "metric"}
)
if weather_response.status_code == 200:
    weather_data = weather_response.json()
    temperatura = weather_data['main']['temp']
    # ... procesar respuesta espec√≠fica de OpenWeatherMap

# API 2: Noticias (NewsAPI)  
news_response = requests.get(
    "https://newsapi.org/v2/everything",
    headers={"X-API-Key": "tu_news_key"},
    params={"q": "Madrid", "language": "es"}
)
if news_response.status_code == 200:
    news_data = news_response.json()
    # ... procesar respuesta espec√≠fica de NewsAPI

# API 3: Pa√≠s (REST Countries)
country_response = requests.get("https://restcountries.com/v3.1/name/Spain")
if country_response.status_code == 200:
    country_data = country_response.json()[0]
    # ... procesar respuesta espec√≠fica de REST Countries

# ¬°Y esto es solo para UNA ciudad!
'''
    
    print(f"\n{Fore.RED}C√≥digo sin Facade:{Style.RESET_ALL}")
    print(codigo_sin_facade)
    
    print(f"{Fore.GREEN}{'='*80}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}‚úÖ CON FACADE (Simple){Style.RESET_ALL}")
    print(f"{Fore.GREEN}{'='*80}{Style.RESET_ALL}")
    
    codigo_con_facade = '''
# Con Facade - C√≥digo simple y desacoplado
from src.facade.informacion_facade import FachadaInformacionCiudad

facade = FachadaInformacionCiudad()
info = facade.obtener_informacion_completa("Madrid")

# ¬°Listo! Toda la informaci√≥n en un objeto estructurado
print(f"Temperatura: {info.clima.temperatura}¬∞C")
print(f"Pa√≠s: {info.pais.nombre_comun}")
print(f"Noticias: {len(info.noticias.noticias)}")
'''
    
    print(f"{Fore.GREEN}C√≥digo con Facade:{Style.RESET_ALL}")
    print(codigo_con_facade)


def demo_diagnostico():
    """Demuestra las funciones de diagn√≥stico"""
    print(f"\n{Fore.CYAN}{'='*80}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}üîß DEMO DIAGN√ìSTICO{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'='*80}{Style.RESET_ALL}")
    
    facade = FachadaInformacionCiudad()
    facade.verificar_estado_apis()


def demo_interactivo():
    """Demo interactivo donde el usuario puede consultar ciudades"""
    print(f"\n{Fore.MAGENTA}{'='*80}{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}üéØ DEMO INTERACTIVO{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}{'='*80}{Style.RESET_ALL}")
    
    facade = FachadaInformacionCiudad()
    
    print(f"{Fore.YELLOW}¬°Consulta informaci√≥n de cualquier ciudad!{Style.RESET_ALL}")
    print(f"{Fore.CYAN}Ejemplos: Madrid, Barcelona, M√©xico, Buenos Aires, Lima{Style.RESET_ALL}")
    print(f"{Fore.CYAN}Escribe 'salir' para terminar{Style.RESET_ALL}\n")
    
    while True:
        try:
            ciudad = input(f"{Fore.GREEN}üèôÔ∏è  ¬øQu√© ciudad quieres consultar? {Style.RESET_ALL}").strip()
            
            if ciudad.lower() in ['salir', 'exit', 'quit', '']:
                print(f"{Fore.YELLOW}¬°Hasta luego! üëã{Style.RESET_ALL}")
                break
            
            informacion = facade.obtener_informacion_completa(ciudad)
            facade.mostrar_resumen(informacion)
            
            print(f"\n{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
            
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}¬°Hasta luego! üëã{Style.RESET_ALL}")
            break
        except Exception as e:
            print(f"{Fore.RED}‚ùå Error: {str(e)}{Style.RESET_ALL}")


def main():
    """Funci√≥n principal que ejecuta todos los demos"""
    print(f"{Fore.CYAN}üèõÔ∏è  DEMOSTRACI√ìN DEL PATR√ìN FACADE{Style.RESET_ALL}")
    print(f"{Fore.CYAN}Sistema de Informaci√≥n Multi-API{Style.RESET_ALL}")
    
    try:
        # 1. Demo b√°sico
        demo_basico()
        
        # 2. Demo m√∫ltiples ciudades
        demo_multiples_ciudades()
        
        # 3. Comparaci√≥n sin facade
        demo_comparacion_sin_facade()
        
        # 4. Diagn√≥stico
        demo_diagnostico()
        
        # 5. Demo interactivo (opcional)
        print(f"\n{Fore.YELLOW}¬øQuieres probar el demo interactivo? (s/n): {Style.RESET_ALL}", end="")
        respuesta = input().strip().lower()
        
        if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
            demo_interactivo()
        
        print(f"\n{Fore.GREEN}üéâ ¬°Demo completado! El patr√≥n Facade simplifica el acceso a m√∫ltiples APIs.{Style.RESET_ALL}")
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error en el demo: {str(e)}{Style.RESET_ALL}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 