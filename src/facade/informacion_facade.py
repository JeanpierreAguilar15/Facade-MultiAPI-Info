"""
üèõÔ∏è FACHADA PRINCIPAL - Patr√≥n Facade

Esta es la clase principal que implementa el patr√≥n Facade.
Proporciona una interfaz simplificada para acceder a m√∫ltiples APIs
de informaci√≥n (clima, noticias, pa√≠ses) sin que el cliente necesite
conocer los detalles de implementaci√≥n de cada una.
"""
from typing import Optional
from colorama import init, Fore, Style
from ..models.informacion_models import InformacionCompleta
from ..providers.clima_provider import ClimaProvider
from ..providers.noticias_provider import NoticiasProvider
from ..providers.pais_provider import PaisProvider
from ..utils.config import Config

# Inicializar colorama para colores en consola
init()


class FachadaInformacionCiudad:
    """
    üèõÔ∏è FACADE - Interfaz unificada para obtener informaci√≥n completa de ciudades
    
    Esta clase encapsula la complejidad de trabajar con m√∫ltiples APIs:
    - OpenWeatherMap (clima)
    - NewsAPI (noticias)  
    - REST Countries (informaci√≥n de pa√≠ses)
    
    El cliente solo necesita conocer esta clase, no los detalles de cada API.
    """
    
    def __init__(self):
        """Inicializa todos los proveedores internos"""
        print(f"{Fore.CYAN}üèõÔ∏è  Inicializando Fachada de Informaci√≥n...{Style.RESET_ALL}")
        
        # Crear instancias de todos los proveedores
        self.clima_provider = ClimaProvider()
        self.noticias_provider = NoticiasProvider()
        self.pais_provider = PaisProvider()
        
        print(f"{Fore.GREEN}‚úÖ Fachada lista para usar{Style.RESET_ALL}")
    
    def obtener_informacion_completa(self, ciudad: str) -> InformacionCompleta:
        """
        üéØ M√âTODO PRINCIPAL DEL FACADE
        
        Obtiene toda la informaci√≥n disponible sobre una ciudad en una sola llamada.
        Internamente coordina las llamadas a m√∫ltiples APIs y maneja errores.
        
        Args:
            ciudad: Nombre de la ciudad a consultar
            
        Returns:
            InformacionCompleta: Objeto con toda la informaci√≥n agregada
        """
        print(f"\n{Fore.YELLOW}üîç Obteniendo informaci√≥n completa de: {ciudad}{Style.RESET_ALL}")
        print("=" * 60)
        
        # Crear objeto resultado
        resultado = InformacionCompleta(ciudad_consultada=ciudad)
        
        # Determinar pa√≠s basado en la ciudad
        pais = self.pais_provider.obtener_pais_por_ciudad(ciudad)
        
        # 1. Obtener informaci√≥n clim√°tica
        print(f"\n{Fore.BLUE}üå§Ô∏è  PASO 1: Obteniendo clima...{Style.RESET_ALL}")
        try:
            resultado.clima = self.clima_provider.obtener_clima(ciudad)
            if resultado.clima:
                print(f"{Fore.GREEN}‚úÖ Clima obtenido: {resultado.clima.temperatura}¬∞C{Style.RESET_ALL}")
            else:
                resultado.errores.append("No se pudo obtener informaci√≥n clim√°tica")
                print(f"{Fore.RED}‚ùå Error obteniendo clima{Style.RESET_ALL}")
        except Exception as e:
            resultado.errores.append(f"Error clima: {str(e)}")
            print(f"{Fore.RED}‚ùå Error clima: {str(e)}{Style.RESET_ALL}")
        
        # 2. Obtener noticias
        print(f"\n{Fore.BLUE}üì∞ PASO 2: Obteniendo noticias...{Style.RESET_ALL}")
        try:
            resultado.noticias = self.noticias_provider.obtener_noticias(ciudad, pais)
            if resultado.noticias:
                print(f"{Fore.GREEN}‚úÖ Noticias obtenidas: {len(resultado.noticias.noticias)} art√≠culos{Style.RESET_ALL}")
            else:
                resultado.errores.append("No se pudieron obtener noticias")
                print(f"{Fore.RED}‚ùå Error obteniendo noticias{Style.RESET_ALL}")
        except Exception as e:
            resultado.errores.append(f"Error noticias: {str(e)}")
            print(f"{Fore.RED}‚ùå Error noticias: {str(e)}{Style.RESET_ALL}")
        
        # 3. Obtener informaci√≥n del pa√≠s
        print(f"\n{Fore.BLUE}üåç PASO 3: Obteniendo informaci√≥n del pa√≠s...{Style.RESET_ALL}")
        try:
            resultado.pais = self.pais_provider.obtener_info_pais(pais)
            if resultado.pais:
                print(f"{Fore.GREEN}‚úÖ Pa√≠s obtenido: {resultado.pais.nombre_comun}{Style.RESET_ALL}")
            else:
                resultado.errores.append("No se pudo obtener informaci√≥n del pa√≠s")
                print(f"{Fore.RED}‚ùå Error obteniendo informaci√≥n del pa√≠s{Style.RESET_ALL}")
        except Exception as e:
            resultado.errores.append(f"Error pa√≠s: {str(e)}")
            print(f"{Fore.RED}‚ùå Error pa√≠s: {str(e)}{Style.RESET_ALL}")
        
        # Resumen final
        print(f"\n{Fore.CYAN}üìä RESUMEN:{Style.RESET_ALL}")
        info_disponible = resultado.informacion_disponible()
        print(f"   Informaci√≥n obtenida: {', '.join(info_disponible) if info_disponible else 'Ninguna'}")
        
        if resultado.tiene_errores():
            print(f"{Fore.YELLOW}‚ö†Ô∏è  Se encontraron {len(resultado.errores)} errores{Style.RESET_ALL}")
        else:
            print(f"{Fore.GREEN}üéâ ¬°Informaci√≥n completa obtenida exitosamente!{Style.RESET_ALL}")
        
        return resultado
    
    def mostrar_resumen(self, informacion: InformacionCompleta):
        """
        Muestra un resumen bonito de toda la informaci√≥n obtenida
        
        Args:
            informacion: Objeto InformacionCompleta a mostrar
        """
        print(f"\n{Fore.MAGENTA}{'='*80}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}üèõÔ∏è  RESUMEN COMPLETO - {informacion.ciudad_consultada.upper()}{Style.RESET_ALL}")
        print(f"{Fore.MAGENTA}{'='*80}{Style.RESET_ALL}")
        
        # Mostrar clima
        if informacion.clima:
            print(f"\n{Fore.CYAN}üå§Ô∏è  CLIMA:{Style.RESET_ALL}")
            print(f"   üìç Ciudad: {informacion.clima.ciudad}, {informacion.clima.pais}")
            print(f"   üå°Ô∏è  Temperatura: {informacion.clima.temperatura}¬∞C (se siente como {informacion.clima.sensacion_termica}¬∞C)")
            print(f"   ‚òÅÔ∏è  Condici√≥n: {informacion.clima.descripcion}")
            print(f"   üíß Humedad: {informacion.clima.humedad}%")
            if informacion.clima.presion:
                print(f"   üìä Presi√≥n: {informacion.clima.presion} hPa")
        
        # Mostrar informaci√≥n del pa√≠s
        if informacion.pais:
            print(f"\n{Fore.GREEN}üåç PA√çS:{Style.RESET_ALL}")
            print(f"   {informacion.pais.bandera_emoji} Nombre: {informacion.pais.nombre_comun}")
            print(f"   üèõÔ∏è  Nombre oficial: {informacion.pais.nombre_oficial}")
            print(f"   üèôÔ∏è  Capital: {', '.join(informacion.pais.capital)}")
            print(f"   üë• Poblaci√≥n: {informacion.pais.poblacion:,} habitantes")
            print(f"   üìê √Årea: {informacion.pais.area:,} km¬≤")
            print(f"   üó£Ô∏è  Idiomas: {', '.join(informacion.pais.idiomas)}")
            print(f"   üí∞ Monedas: {', '.join(informacion.pais.monedas)}")
        
        # Mostrar noticias
        if informacion.noticias and informacion.noticias.noticias:
            print(f"\n{Fore.YELLOW}üì∞ NOTICIAS RECIENTES ({informacion.noticias.total_resultados}):{Style.RESET_ALL}")
            for i, noticia in enumerate(informacion.noticias.noticias[:3], 1):  # Mostrar solo las primeras 3
                print(f"\n   {i}. {Fore.WHITE}{noticia.titulo}{Style.RESET_ALL}")
                print(f"      üìÖ Fuente: {noticia.fuente}")
                if noticia.descripcion:
                    descripcion_corta = noticia.descripcion[:100] + "..." if len(noticia.descripcion) > 100 else noticia.descripcion
                    print(f"      üìù {descripcion_corta}")
        
        # Mostrar errores si los hay
        if informacion.tiene_errores():
            print(f"\n{Fore.RED}‚ö†Ô∏è  ERRORES ENCONTRADOS:{Style.RESET_ALL}")
            for error in informacion.errores:
                print(f"   ‚Ä¢ {error}")
        
        print(f"\n{Fore.MAGENTA}{'='*80}{Style.RESET_ALL}")
        print(f"{Fore.CYAN}‚è∞ Consulta realizada: {informacion.timestamp.strftime('%Y-%m-%d %H:%M:%S')}{Style.RESET_ALL}")
    
    def verificar_estado_apis(self):
        """
        Verifica el estado de conexi√≥n de todas las APIs
        √ötil para diagn√≥stico
        """
        print(f"\n{Fore.CYAN}üîß VERIFICANDO ESTADO DE LAS APIs...{Style.RESET_ALL}")
        print("-" * 50)
        
        # Mostrar configuraci√≥n
        Config.mostrar_configuracion()
        
        print(f"\n{Fore.CYAN}üåê Estado de conexiones:{Style.RESET_ALL}")
        
        # Verificar cada API
        apis = [
            ("Clima (OpenWeatherMap)", self.clima_provider.verificar_conexion()),
            ("Noticias (NewsAPI)", self.noticias_provider.verificar_conexion()),
            ("Pa√≠ses (REST Countries)", self.pais_provider.verificar_conexion())
        ]
        
        for nombre, estado in apis:
            icono = "‚úÖ" if estado else "‚ùå"
            color = Fore.GREEN if estado else Fore.RED
            print(f"   {icono} {color}{nombre}: {'Disponible' if estado else 'No disponible'}{Style.RESET_ALL}")
    
    def obtener_solo_clima(self, ciudad: str) -> Optional:
        """M√©todo de conveniencia para obtener solo informaci√≥n clim√°tica"""
        return self.clima_provider.obtener_clima(ciudad)
    
    def obtener_solo_noticias(self, ciudad: str, pais: str = None) -> Optional:
        """M√©todo de conveniencia para obtener solo noticias"""
        if not pais:
            pais = self.pais_provider.obtener_pais_por_ciudad(ciudad)
        return self.noticias_provider.obtener_noticias(ciudad, pais)
    
    def obtener_solo_pais(self, pais: str) -> Optional:
        """M√©todo de conveniencia para obtener solo informaci√≥n del pa√≠s"""
        return self.pais_provider.obtener_info_pais(pais) 